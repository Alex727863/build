#!/sbin/sh
#
# ak3mount script to perform various operations created by Nikhil Menghani
#
# inspired from topjohnwu's (@xda) magisk
# inspired from xXx's (@xda) no limits module
# inspired from osm0sis's (@xda) universal shell script functions and anykernel3 scripts (reference below)
# https://github.com/osm0sis/AnyKernel3
# inspired from opengapps installer script (reference below)
# https://github.com/opengapps/opengapps/blob/master/scripts/inc.installer.sh
#

addToLog() {
  echo "$1" >> "/tmp/NikGapps.log"
}

abort_while_mounting() {
  ui_print " "
  ui_print "------------------------------------------"
  ui_print "Error: $*";
  ui_print "------------------------------------------"
  ui_print " "
  addToLog "Aborting while mounting $*"
  copyLogs_mounting;
  restore_env;
  exit 1;
}

beginswith() {
  case $2 in
    "$1"*) echo true ;;
    *) echo false ;;
  esac
}

# This is meant to copy the files safely from source to destination
CopyFile() {
  if [ -f "$1" ]; then
    mkdir -p "$(dirname "$2")"
    cp -f "$1" "$2"
  else
    addToLog "- File $1 does not exist!"
  fi
}

copyLogs_mounting() {
  CopyFile "$recoveryLog" "$logDir/logfiles/recovery.log"
  CopyFile "$nikGappsLog" "$logDir/logfiles/NikGapps.log"
  CopyFile "$system/build.prop" "$logDir/propfiles/build.prop"
  CopyFile "/vendor/etc/fstab.qcom" "$logDir/partitions/fstab.qcom"
  CopyFile "/etc/recovery.fstab" "$logDir/fstab/recovery.fstab"
  CopyFile "/sdcard/NikGapps/debloater.config" "$logDir/configfiles/debloater.config"
  CopyFile "/sdcard/NikGapps/nikgapps.config" "$logDir/configfiles/nikgapps.config"
  cd "$logDir" || return
  rm -rf "$nikGappsDir"/logs
  tar -cz -f "/tmp/$nikGappsLogFile" ./*
  mkdir -p "$nikGappsDir"/logs
  CopyFile /tmp/"$nikGappsLogFile" "$nikGappsDir"/logs/"$nikGappsLogFile"
  [ -z "$nikgapps_config_dir" ] && nikgapps_config_dir=/sdcard/NikGapps
  rm -rf "$nikgapps_config_dir"/nikgapps_logs
  mkdir -p "$nikgapps_config_dir"/nikgapps_logs
  CopyFile /tmp/"$nikGappsLogFile" "$nikgapps_config_dir"/nikgapps_logs/"$nikGappsLogFile"
  cd /
}

file_getprop() { $BB grep "^$2=" "$1" | $BB cut -d= -f2-; }

find_slot() {
  local slot=$(getprop ro.boot.slot_suffix 2>/dev/null)
  test "$slot" || slot=$(grep -o 'androidboot.slot_suffix=.*$' /proc/cmdline | cut -d\  -f1 | cut -d= -f2)
  if [ ! "$slot" ]; then
    slot=$(getprop ro.boot.slot 2>/dev/null)
    test "$slot" || slot=$(grep -o 'androidboot.slot=.*$' /proc/cmdline | cut -d\  -f1 | cut -d= -f2)
    test "$slot" && slot=_$slot
  fi
  test "$slot" && echo "$slot"
}

grep_cmdline() {
  local REGEX="s/^$1=//p"
  cat /proc/cmdline | tr '[:space:]' '\n' | sed -n "$REGEX" 2>/dev/null
}

# Check if the partition is mounted
is_mounted() {
  addToLog "- Checking if $1 is mounted"
  $BB mount | $BB grep -q " $1 ";
}

is_mounted_rw() {
  local mounted_rw=false
  local startswith=$(beginswith / "$1")
  test "$startswith" == "false" && part=/"$1" || part="$1"
  touch "$part"/.rw && rm "$part"/.rw && mounted_rw=true
  addToLog "- checked if $part/.rw is writable i.e. $mounted_rw ($1/.rw being original argument)"
  echo $mounted_rw
}

mount_system_source() {
  local system_source
  system_source=$(grep ' /system ' /etc/fstab | tail -n1 | cut -d' ' -f1)
  if [ -z "${system_source}" ]; then
    system_source=$(grep ' /system_root ' /etc/fstab | tail -n1 | cut -d' ' -f1)
  fi
  if [ -z "${system_source}" ]; then
    system_source=$(grep ' / ' /etc/fstab | tail -n1 | cut -d' ' -f1)
  fi
  echo "${system_source}"
}

mount_android_root() {
  local system_source
  system_source=$(mount_system_source)
  if [ -n "${system_source}" ]; then
    setup_mountpoint /system_root
    if ! is_mounted /system_root; then
      mount -o ro -t auto "${system_source}" /system_root 2>/dev/null
    fi
    if is_mounted /system_root && [ ! -f /system_root/system/build.prop ] &&
        ! is_mounted "$ANDROID_ROOT" && [ ! "$ANDROID_ROOT" = '/system_root' ]; then
      mount --move /system_root "${ANDROID_ROOT}"
    fi
  else
    setup_mountpoint "$ANDROID_ROOT"
    if ! is_mounted "$ANDROID_ROOT"; then
      mount -o ro -t auto "$ANDROID_ROOT" 2>/dev/null
    fi
  fi
}

# Mount all the partitions
mount_all() {
  dynamic_partitions=$(getprop ro.boot.dynamic_partitions)
  addToLog "- dynamic_partitions is $dynamic_partitions"
  # Check A/B slot
  SLOT=$(find_slot)
  [ -z "$SLOT" ] || ui_print "- Current boot slot: $SLOT"
  if ! is_mounted /cache; then
    mount /cache 2>/dev/null && UMOUNT_CACHE=1
  fi
  if ! is_mounted /data; then
    ui_print "- Mounting /data"
    $BB mount /data;
    UMOUNT_DATA=1;
  else
    addToLog "- /data already mounted!"
  fi;
  ui_print "- Mounting /vendor"
  $BB mount -o ro -t auto /vendor 2>/dev/null;
  ui_print "- Mounting /product"
  $BB mount -o ro -t auto /product 2>/dev/null;
  addToLog "- Mounting /persist"
  $BB mount -o ro -t auto /persist 2>/dev/null;
  addToLog "- Setting up mount point $ANDROID_ROOT"
  mount_android_root
  addToLog "- $ANDROID_ROOT should be mounted as rw"
  case $ANDROID_ROOT in
    /system_root) setup_mountpoint /system;;
    /system)
      if ! is_mounted /system && ! is_mounted /system_root; then
        setup_mountpoint /system_root;
        addToLog "- mounting /system_root partition as readwrite"
        $BB mount -o rw -t auto /system_root;
      elif [ -f /system/system/build.prop ]; then
        setup_mountpoint /system_root;
        addToLog "- Moving /system to /system_root"
        $BB mount --move /system /system_root;
      fi;
      ret=$?
      addToLog "- Command Execution Status: $ret"
      if [ $ret -ne 0 ]; then
        addToLog "- $ret is not equals to 0"
        addToLog "- Unmounting and Remounting /system as /system_root"
        (umount /system;
        umount -l /system) 2>/dev/null
        if [ -d /dev/block/mapper ]; then
          addToLog "- Device with dynamic partitions Found"
          test -e /dev/block/mapper/system || local slot=$(find_slot)
          addToLog "- Mounting /system$slot as read only"
          mount -o ro -t auto /dev/block/mapper/system"$slot" /system_root
          addToLog "- Mounting /vendor$slot as read only"
          mount -o ro -t auto /dev/block/mapper/vendor"$slot" /vendor 2>/dev/null
          addToLog "- Mounting /product$slot as read only"
          mount -o ro -t auto /dev/block/mapper/product"$slot" /product 2>/dev/null
        else
          test -e /dev/block/bootdevice/by-name/system || local slot=$(find_slot)
          (mount -o ro -t auto /dev/block/bootdevice/by-name/vendor"$slot" /vendor
          mount -o ro -t auto /dev/block/bootdevice/by-name/product"$slot" /product
          mount -o ro -t auto /dev/block/bootdevice/by-name/persist"$slot" /persist) 2>/dev/null
          addToLog "- Device doesn't have dynamic partitions, mounting /system$slot as ro"
          mount -o ro -t auto /dev/block/bootdevice/by-name/system"$slot" /system_root
        fi
      else
         addToLog "- $ret should be equals to 0"
      fi
    ;;
  esac;
  addToLog "- Checking if /system_root is mounted.."
  if is_mounted /system_root; then
    mount_apex;
    if [ -f /system_root/build.prop ]; then
      addToLog "- Binding /system_root as /system"
      $BB mount -o bind /system_root /system;
    else
      addToLog "- Binding /system_root/system as /system"
      $BB mount -o bind /system_root/system /system;
    fi;
  elif is_mounted /system; then
    addToLog "- /system is mounted"
  else
    addToLog "- Could not mount /system"
    abort_while_mounting "- Could not mount /system, try changing recovery!"
  fi;
  system=/system
  if [ -d /dev/block/mapper ]; then
    for block in system vendor product; do
      for slot in "" _a _b; do
        addToLog "- Executing blockdev setrw /dev/block/mapper/$block$slot"
        blockdev --setrw /dev/block/mapper/$block$slot 2>/dev/null
      done
    done
  fi

  addToLog "- Remounting /system as read write"
  mount -o rw,remount -t auto /system || mount -o rw,remount -t auto /
  addToLog "- Remounting /vendor as read write"
  mount -o rw,remount -t auto /vendor 2>/dev/null
  addToLog "- Remounting /product as read write"
  mount -o rw,remount -t auto /product 2>/dev/null
  ls -alR /system > "$COMMONDIR/System_Files_Before.txt"
  ls -alR /product > "$COMMONDIR/Product_Files_Before.txt"
}

# More info on Apex here -> https://www.xda-developers.com/android-q-apex-biggest-tdynamic_partitionshing-since-project-treble/
mount_apex() {
  addToLog "- Setting up Apex Mount"
  test -d /system_root/system/apex || return 1;
  local apex dest loop minorx num;
  setup_mountpoint /apex;
  minorx=1
  test -e /dev/block/loop1 && minorx=$(ls -l /dev/block/loop1 | awk '{ print $6 }')
  num=0;
  for apex in /system_root/system/apex/*; do
    dest=/apex/$($BB basename "$apex" .apex);
    test "$dest" == /apex/com.android.runtime.release && dest=/apex/com.android.runtime;
    $BB mkdir -p $dest;
    case $apex in
      *.apex)
        $BB unzip -qo "$apex" apex_payload.img -d /apex;
        $BB mv -f /apex/apex_payload.img $dest.img;
        $BB mount -t ext4 -o ro,noatime $dest.img $dest 2>/dev/null;
        if [ $? != 0 ]; then
          while [ $num -lt 64 ]; do
            loop=/dev/block/loop$num;
            ($BB mknod $loop b 7 $((num * minorx));
            $BB losetup $loop $dest.img) 2>/dev/null;
            num=$((num + 1));
            $BB losetup $loop | $BB grep -q $dest.img && break;
          done;
          $BB mount -t ext4 -o ro,loop,noatime $loop $dest;
          if [ $? != 0 ]; then
            $BB losetup -d $loop 2>/dev/null;
          fi;
        fi;
      ;;
      *) $BB mount -o bind "$apex" $dest;;
    esac;
  done;
  export ANDROID_RUNTIME_ROOT=/apex/com.android.runtime;
  export ANDROID_TZDATA_ROOT=/apex/com.android.tzdata;
  export BOOTCLASSPATH=/apex/com.android.runtime/javalib/core-oj.jar:/apex/com.android.runtime/javalib/core-libart.jar:/apex/com.android.runtime/javalib/okhttp.jar:/apex/com.android.runtime/javalib/bouncycastle.jar:/apex/com.android.runtime/javalib/apache-xml.jar:/system/framework/framework.jar:/system/framework/ext.jar:/system/framework/telephony-common.jar:/system/framework/voip-common.jar:/system/framework/ims-common.jar:/system/framework/android.test.base.jar:/system/framework/telephony-ext.jar:/apex/com.android.conscrypt/javalib/conscrypt.jar:/apex/com.android.media/javalib/updatable-media.jar
}

nikGappsLogo() {
  ui_print " "
  ui_print "------------------------------------------"
  ui_print "*   * * *  * *****   *   ***** ***** *****"
  ui_print "**  * * * *  *      * *  *   * *   * *    "
  ui_print "* * * * **   * *** *   * ***** ***** *****"
  ui_print "*  ** * * *  *   * ***** *     *         *"
  ui_print "*   * * *  * ***** *   * *     *     *****"
  ui_print " "
  ui_print "-->     Created by Nikhil Menghani     <--"
  ui_print "------------------------------------------"
  ui_print " "
}

restore_env() {
  $BOOTMODE && return 1;
  local dir;
  unset -f getprop;
  OLD_LD_PATH=$LD_LIBRARY_PATH
  OLD_LD_PRE=$LD_PRELOAD
  OLD_LD_CFG=$LD_CONFIG_FILE
  unset LD_LIBRARY_PATH LD_PRELOAD LD_CONFIG_FILE
  test "$OLD_LD_PATH" && export LD_LIBRARY_PATH=$OLD_LD_PATH;
  test "$OLD_LD_PRE" && export LD_PRELOAD=$OLD_LD_PRE;
  test "$OLD_LD_CFG" && export LD_CONFIG_FILE=$OLD_LD_CFG;
  umount_all;
  test -L /etc_link && $BB rm -rf /etc/*;
  (for dir in /apex /system /system_root /etc; do
    if [ -L "${dir}_link" ]; then
      rmdir $dir;
      $BB mv -f ${dir}_link $dir;
    fi;
  done;
  $BB umount -l /dev/random) 2>/dev/null;
}

setup_env() {
  $BOOTMODE && return 1;
  $BB mount -o bind /dev/urandom /dev/random;
  if [ -L /etc ]; then
    setup_mountpoint /etc;
    $BB cp -af /etc_link/* /etc;
    $BB sed -i 's; / ; /system_root ;' /etc/fstab;
  fi;
  ui_print " "
  ui_print "--> Unmounting partitions for fresh install"
  umount_all;
  ui_print " "
  ui_print "--> Mounting partitions"
  mount_all;
  OLD_LD_PATH=$LD_LIBRARY_PATH;
  OLD_LD_PRE=$LD_PRELOAD;
  OLD_LD_CFG=$LD_CONFIG_FILE;
  unset LD_LIBRARY_PATH LD_PRELOAD LD_CONFIG_FILE;
  if [ ! "$(getprop 2>/dev/null)" ]; then
    getprop() {
      local propdir propfile propval;
      for propdir in / /system_root /system /vendor /odm /product; do
        for propfile in default.prop build.prop; do
          test "$propval" && break 2 || propval="$(file_getprop $propdir/$propfile "$1" 2>/dev/null)";
        done;
      done;
      test "$propval" && echo "$propval" || echo "";
    }
  elif [ ! "$(getprop ro.build.type 2>/dev/null)" ]; then
    getprop() {
      ($(which getprop) | $BB grep "$1" | $BB cut -d[ -f3 | $BB cut -d] -f1) 2>/dev/null;
    }
  fi;
}

setup_flashable() {
  $BOOTMODE && return
  MAGISKTMP=/sbin/.magisk
  MAGISKBIN=/data/adb/magisk
  [ -z "$TMPDIR" ] && TMPDIR=/dev/tmp
  ui_print "--> Setting up Environment"
  if [ -x "$MAGISKTMP"/busybox/busybox ]; then
    BB=$MAGISKTMP/busybox/busybox
    [ -z "$BBDIR" ] && BBDIR=$MAGISKTMP/busybox
    addToLog "- Busybox exists at $BB"
  elif [ -x $TMPDIR/bin/busybox ]; then
    BB=$TMPDIR/bin/busybox
    addToLog "- Busybox exists at $BB"
    [ -z "$BBDIR" ] && BBDIR=$TMPDIR/bin
  else
    # Construct the PATH
    [ -z $BBDIR ] && BBDIR=$TMPDIR/bin
    mkdir -p $BBDIR
    addToLog "- Installing Busybox at $MAGISKBIN/busybox"
    ln -s $MAGISKBIN/busybox $BBDIR/busybox
    $MAGISKBIN/busybox --install -s $BBDIR
    BB=$MAGISKBIN/busybox
    addToLog "- Installed Busybox at $MAGISKBIN/busybox"
  fi
  ui_print "- Busybox found in $BB"
  echo "$PATH" | grep -q "^$BBDIR" || export PATH=$BBDIR:$PATH
}

# Setting up mount point
setup_mountpoint() {
  addToLog "- Setting up mount point $1 before actual mount"
  test -L "$1" && $BB mv -f "$1" "${1}"_link;
  if [ ! -d "$1" ]; then
    rm -f "$1";
    mkdir -p "$1";
  fi;
}

setup_variables() {
  nikGappsLogo
  # Detect whether in boot mode
  [ -z "$BOOTMODE" ] && ps | grep zygote | grep -qv grep && BOOTMODE=true
  [ -z $BOOTMODE ] && ps -A 2>/dev/null | grep zygote | grep -qv grep && BOOTMODE=true
  [ -z $BOOTMODE ] && BOOTMODE=false

  test "$ANDROID_ROOT" || ANDROID_ROOT=/system;
  system=/system
  nikGappsLog="/tmp/NikGapps.log"
  datetime=$(date +%Y_%m_%d_%H_%M_%S)
  nikGappsLogFile="NikGapps_logs_$datetime.tar.gz"
  recoveryLog=/tmp/recovery.log
  logDir="/tmp/NikGapps/logs"
  nikGappsDir="/sdcard/NikGapps"
  dynamic_partitions="false"
  COMMONDIR=/tmp/AFZCScripts;
}

# Unmount apex partition upon recovery cleanup
umount_apex() {
  test -d /apex || return 1;
  local dest loop;
  for dest in $($BB find /apex -type d -mindepth 1 -maxdepth 1); do
    if [ -f "$dest".img ]; then
      loop=$($BB mount | $BB grep "$dest" | $BB cut -d" " -f1);
    fi;
    ($BB umount -l "$dest";
    $BB losetup -d "$loop") 2>/dev/null;
  done;
  $BB rm -rf /apex 2>/dev/null;
  unset ANDROID_RUNTIME_ROOT ANDROID_TZDATA_ROOT BOOTCLASSPATH;
}

# Unmount all partitions on recovery clean up and for a fresh install
umount_all() {
  (if [ ! -d /postinstall/tmp ]; then
    ui_print "- Unmounting /system"
    $BB umount /system;
    $BB umount -l /system;
    $BB umount /mnt/system
    $BB umount -l /mnt/system
    umount_apex;
    if [ -e /system_root ]; then
      ui_print "- Unmounting /system_root"
      $BB umount /system_root;
      $BB umount -l /system_root;
    fi;
    $BB umount /mnt/system;
    $BB umount -l /mnt/system;
  fi;
  ui_print "- Unmounting /vendor"
  $BB umount /vendor;
  $BB umount -l /vendor;
  $BB umount /mnt/vendor;
  $BB umount -l /mnt/vendor;
  addToLog "- Unmounting /persist"
  $BB umount /persist
  $BB umount -l /persist
  ui_print "- Unmounting /product"
  $BB umount /product;
  $BB umount -l /product;
  $BB umount /mnt/product
  $BB umount -l /mnt/product
  if [ "$UMOUNT_DATA" ]; then
    ui_print "- Unmounting /data"
    $BB umount /data;
    $BB umount -l /data;
  fi
  if [ "$UMOUNT_CACHE" ]; then
    $BB umount /cache
    $BB umount -l /cache
  fi) 2>/dev/null;
}

ui_print() {
  until [ ! "$1" ]; do
    echo "ui_print $1
      ui_print" >> "$OUTFD";
      addToLog "$1"
    shift;
  done;
}

setup_variables
setup_flashable
setup_env
