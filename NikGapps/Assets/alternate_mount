#!/sbin/sh

addToLog() {
  echo "$1" >> "/tmp/NikGapps.log"
}

abort_while_mounting() {
  ui_print " "
  ui_print "------------------------------------------"
  ui_print "Error: $@";
  ui_print "------------------------------------------"
  ui_print " "
  addToLog "Aborting while mounting $@"
  copyLogs_mounting;
  restore_env;
  exit 1;
}

copyLogs_mounting() {
  cp -f "$recoveryLog" "$logDir/recovery.log"
  cp -f "$nikGappsLog" "$logDir/NikGapps.log"
  cp -f "$system/build.prop" "$logDir/build.prop"
  cp -f "/sdcard/NikGapps/debloater.config" "$logDir/debloater.config"
  cp -f "/sdcard/NikGapps/nikgapps.config" "$logDir/nikgapps.config"
  cd $logDir
  rm -rf $nikGappsDir/logs
  tar -cz -f "/tmp/$nikGappsLogFile" *
  mkdir -p "$nikGappsDir"/logs
  cp -f /tmp/"$nikGappsLogFile" $nikGappsDir/logs/"$nikGappsLogFile"
  cd /
}

file_getprop() { $BB grep "^$2=" "$1" | $BB cut -d= -f2-; }

grep_cmdline() {
  local REGEX="s/^$1=//p"
  cat /proc/cmdline | tr '[:space:]' '\n' | sed -n "$REGEX" 2>/dev/null
}

# Check if the partition is mounted
is_mounted() {
  addToLog "- Checking if $1 is mounted"
  $BB mount | $BB grep -q " $1 ";
}

# Mount all the partitions
mount_all() {
  if ! is_mounted /data; then
    mount /data
    UMOUNT_DATA=1
  fi
  (mount /cache
  mount -o ro -t auto /persist
  mount -o ro -t auto /product
  mount -o ro -t auto /vendor) 2>/dev/null
  setup_mountpoint $ANDROID_ROOT
  if ! is_mounted $ANDROID_ROOT; then
    mount -o ro -t auto $ANDROID_ROOT 2>/dev/null
  fi
  case $ANDROID_ROOT in
    /system_root) setup_mountpoint /system;;
    /system)
      if ! is_mounted /system && ! is_mounted /system_root; then
        setup_mountpoint /system_root
        mount -o ro -t auto /system_root
      elif [ -f /system/system/build.prop ]; then
        setup_mountpoint /system_root
        mount --move /system /system_root
      fi
      if [ $? != 0 ]; then
        umount /system
        umount -l /system 2>/dev/null
        if [ "$dynamic_partitions" = "true" ]; then
          test -e /dev/block/mapper/system || local slot=$(getprop ro.boot.slot_suffix 2>/dev/null)
          mount -o ro -t auto /dev/block/mapper/system$slot /system_root
          mount -o ro -t auto /dev/block/mapper/vendor$slot /vendor 2>/dev/null
          mount -o ro -t auto /dev/block/mapper/product$slot /product 2>/dev/null
        else
          test -e /dev/block/bootdevice/by-name/system || local slot=$(getprop ro.boot.slot_suffix 2>/dev/null)
          mount -o ro -t auto /dev/block/bootdevice/by-name/system$slot /system_root
        fi
      fi
    ;;
  esac
  if is_mounted /system_root; then
    if [ -f /system_root/build.prop ]; then
      mount -o bind /system_root /system
    else
      mount -o bind /system_root/system /system
    fi
  fi
  mount_apex
}

# More info on Apex here -> https://www.xda-developers.com/android-q-apex-biggest-thing-since-project-treble/
mount_apex() {
  addToLog "- Setting up Apex Mount"
  test -d /system/apex || return 1;
  local apex dest loop minorx num;
  setup_mountpoint /apex;
  test -e /dev/block/loop1 && minorx=$($BB ls -l /dev/block/loop1 | $BB awk '{ print $6 }') || minorx=1;
  num=0;
  for apex in /system/apex/*; do
    dest=/apex/$($BB basename "$apex" .apex);
    test "$dest" == /apex/com.android.runtime.release && dest=/apex/com.android.runtime;
    $BB mkdir -p $dest;
    case $apex in
      *.apex)
        $BB unzip -qo "$apex" apex_payload.img -d /apex;
        $BB mv -f /apex/apex_payload.img $dest.img;
        $BB mount -t ext4 -o ro,noatime $dest.img $dest 2>/dev/null;
        if [ $? != 0 ]; then
          while [ $num -lt 64 ]; do
            loop=/dev/block/loop$num;
            ($BB mknod $loop b 7 $((num * minorx));
            $BB losetup $loop $dest.img) 2>/dev/null;
            num=$((num + 1));
            $BB losetup $loop | $BB grep -q $dest.img && break;
          done;
          $BB mount -t ext4 -o ro,loop,noatime $loop $dest;
          if [ $? != 0 ]; then
            $BB losetup -d $loop 2>/dev/null;
          fi;
        fi;
      ;;
      *) $BB mount -o bind "$apex" $dest;;
    esac;
  done;
  export ANDROID_RUNTIME_ROOT=/apex/com.android.runtime;
  export ANDROID_TZDATA_ROOT=/apex/com.android.tzdata;
  export BOOTCLASSPATH=/apex/com.android.runtime/javalib/core-oj.jar:/apex/com.android.runtime/javalib/core-libart.jar:/apex/com.android.runtime/javalib/okhttp.jar:/apex/com.android.runtime/javalib/bouncycastle.jar:/apex/com.android.runtime/javalib/apache-xml.jar:/system/framework/framework.jar:/system/framework/ext.jar:/system/framework/telephony-common.jar:/system/framework/voip-common.jar:/system/framework/ims-common.jar:/system/framework/android.test.base.jar:/system/framework/telephony-ext.jar:/apex/com.android.conscrypt/javalib/conscrypt.jar:/apex/com.android.media/javalib/updatable-media.jar;
}

restore_env() {
  $BOOTMODE && return 1;
  local dir;
  unset -f getprop;
  test "$OLD_LD_PATH" && export LD_LIBRARY_PATH=$OLD_LD_PATH;
  test "$OLD_LD_PRE" && export LD_PRELOAD=$OLD_LD_PRE;
  test "$OLD_LD_CFG" && export LD_CONFIG_FILE=$OLD_LD_CFG;
  umount_all;
  test -L /etc_link && $BB rm -rf /etc/*;
  (for dir in /apex /system /system_root /etc; do
    if [ -L "${dir}_link" ]; then
      rmdir $dir;
      $BB mv -f ${dir}_link $dir;
    fi;
  done;
  $BB umount -l /dev/random) 2>/dev/null;
}

setup_env() {
  $BOOTMODE && return 1;
  dynamic_partitions=`getprop ro.boot.dynamic_partitions`

# emulators can only flash booted and may need /system (on legacy images), or / (on system-as-root images), remounted rw
if ! $BOOTMODE; then
  mount -o bind /dev/urandom /dev/random
  umount_all
  mount_all
fi
if [ "$dynamic_partitions" = "true" ]; then
  for block in system vendor product; do
    for slot in "" _a _b; do
      blockdev --setrw /dev/block/mapper/$block$slot 2>/dev/null
    done
  done
fi
mount -o rw,remount -t auto /system || mount -o rw,remount -t auto /
mount -o rw,remount -t auto /vendor 2>/dev/null
mount -o rw,remount -t auto /product 2>/dev/null
  if [ ! "$(getprop 2>/dev/null)" ]; then
    getprop() {
      local propdir propfile propval;
      for propdir in / /system_root /system /vendor /odm /product; do
        for propfile in default.prop build.prop; do
          test "$propval" && break 2 || propval="$(file_getprop $propdir/$propfile $1 2>/dev/null)";
        done;
      done;
      test "$propval" && echo "$propval" || echo "";
    }
  elif [ ! "$(getprop ro.build.type 2>/dev/null)" ]; then
    getprop() {
      ($(which getprop) | $BB grep "$1" | $BB cut -d[ -f3 | $BB cut -d] -f1) 2>/dev/null;
    }
  fi;
}

setup_flashable() {
  $BOOTMODE && return
  MAGISKTMP=/sbin/.magisk
  MAGISKBIN=/data/adb/magisk
  [ -z "$TMPDIR" ] && TMPDIR=/dev/tmp
  ui_print "--> Setting up Environment"
  if [ -x "$MAGISKTMP"/busybox/busybox ]; then
    BB=$MAGISKTMP/busybox/busybox
    [ -z "$BBDIR" ] && BBDIR=$MAGISKTMP/busybox
    addToLog "- Busybox exists at $BB"
  elif [ -x $TMPDIR/bin/busybox ]; then
    BB=$TMPDIR/bin/busybox
    addToLog "- Busybox exists at $BB"
    [ -z "$BBDIR" ] && BBDIR=$TMPDIR/bin
  else
    # Construct the PATH
    [ -z $BBDIR ] && BBDIR=$TMPDIR/bin
    mkdir -p $BBDIR
    addToLog "- Installing Busybox at $MAGISKBIN/busybox"
    ln -s $MAGISKBIN/busybox $BBDIR/busybox
    $MAGISKBIN/busybox --install -s $BBDIR
    BB=$MAGISKBIN/busybox
    addToLog "- Installed Busybox at $MAGISKBIN/busybox"
  fi
  ui_print "- Busybox found in $BB"
  echo "$PATH" | grep -q "^$BBDIR" || export PATH=$BBDIR:$PATH
}

# Setting up mount point
setup_mountpoint() {
  addToLog "- Setting up mount point $1 before actual mount"
  test -L "$1" && $BB mv -f "$1" "${1}"_link;
  if [ ! -d "$1" ]; then
    rm -f "$1";
    mkdir -p "$1";
  fi;
}

setup_variables() {
  # Detect whether in boot mode
  [ -z "$BOOTMODE" ] && ps | grep zygote | grep -qv grep && BOOTMODE=true
  [ -z $BOOTMODE ] && ps -A 2>/dev/null | grep zygote | grep -qv grep && BOOTMODE=true
  [ -z $BOOTMODE ] && BOOTMODE=false

  test "$ANDROID_ROOT" || ANDROID_ROOT=/system;
  # if the device has system as root, following will be set to true during the mount process
  SYSTEM_ROOT=false
  system=/system
  nikGappsLog="/tmp/NikGapps.log"
  datetime=$(date +%Y_%m_%d_%H_%M_%S)
  nikGappsLogFile="NikGapps_logs_$datetime.tar.gz"
  recoveryLog=/tmp/recovery.log
  logDir="/tmp/NikGapps/logs"
  nikGappsDir="/sdcard/NikGapps"
  dynamic_partitions="false"
}

# Unmount apex partition upon recovery cleanup
umount_apex() {
  test -d /apex || return 1;
  local dest loop;
  for dest in $($BB find /apex -type d -mindepth 1 -maxdepth 1); do
    if [ -f "$dest".img ]; then
      loop=$($BB mount | $BB grep "$dest" | $BB cut -d" " -f1);
    fi;
    ($BB umount -l "$dest";
    $BB losetup -d "$loop") 2>/dev/null;
  done;
  $BB rm -rf /apex 2>/dev/null;
  unset ANDROID_RUNTIME_ROOT ANDROID_TZDATA_ROOT BOOTCLASSPATH;
}

# Unmount all partitions on recovery clean up and for a fresh install
umount_all() {
  (umount_apex
  umount /system
  umount -l /system
  if [ -e /system_root ]; then
    umount /system_root
    umount -l /system_root
  fi
  for p in "/cache" "/persist" "/vendor" "/product"; do
    umount $p
    umount -l $p
  done
  if [ "$UMOUNT_DATA" ]; then
    umount /data
    umount -l /data
  fi) 2>/dev/null
}

ui_print() {
  until [ ! "$1" ]; do
    echo "ui_print $1
      ui_print" >> "$OUTFD";
      addToLog "$1"
    shift;
  done;
}

setup_variables
setup_flashable
addToLog "- System is $system before setup"
setup_env
ui_print "- System is $system"
